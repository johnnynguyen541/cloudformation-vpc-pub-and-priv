---
AWSTemplateFormatVersion: 2010-09-09

Description: >
  Servers: EC2 instance on private subnet, with HTTP access via Load Balancer and SSH access via Jump Box

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: "Default Environmnent Name"
  
  PrivateEC2Key: 
    Description: Key for Private EC2 Instance
    Type: String
  
  JumpboxKey: 
    Description: Key for Jumpbox EC2 Instance
    Type: String

  AmiIDPrivateImage:
    Description: AMI ID of EC2 Instances
    Type: String
    Default: ami-013a129d325529d4d

  AmiIDJumpBox:
    Description: AMI ID of Jump Box
    Type: String
    Default: ami-013a129d325529d4d


Resources:
  
  # IAM
  # - Role: allow EC2 Session Manager Access
  RoleForSSMAccess: 
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  # - Instance Profile
  ServerInstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Roles: 
        - !Ref RoleForSSMAccess

  # Security Groups
  # - Load Balancer/Webservers
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-MainVPC"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  # - Webservers in AutoScaling Group
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH to WebServers, all traffic outbound
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-MainVPC"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  # Autoscaling
  # - Launch Config for EC2 instances
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
          sudo yum install -y httpd mariadb-server
          sudo systemctl start httpd
          sudo systemctl enable httpd
          sudo chkconfig httpd on
          sudo systemctl restart httpd
          cd /var/www/html
          echo "Udacity Demo Web Server Up and Running!" > index.html
      ImageId: !Ref AmiIDPrivateImage
      IamInstanceProfile: !Ref ServerInstanceProfile
      KeyName: !Ref PrivateEC2Key
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: t3.small
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
  
  # - Autoscaling Group
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '3'
      MaxSize: '5'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  # Load Balancer
  # - Resource
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PRI1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PRI2-SN"
      SecurityGroups:
      - Ref: LBSecGroup

  # - LB Listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP

  # - LB Listener Rule
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

  # - Target Group
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-MainVPC"

  # Jumpbox Security Group
  JumpboxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Inbound TCP port 22 (SSH), unrestricted outbound
      GroupName: Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-MainVPC"  # NETWORK EXPORT
      Tags: 
        - Key: "Name"
          Value: !Sub ${EnvironmentName} EC2 Security Group

  # Jumpbox EC2 Instances
  JumpboxInstance1:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
      IamInstanceProfile: !Ref ServerInstanceProfile
      ImageId: !Ref AmiIDJumpBox
      InstanceType: t3.micro
      KeyName: !Ref JumpboxKey
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - !Ref JumpboxSecurityGroup
          SubnetId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-PUB1-SN"  # NETWORK EXPORT
      Tags:
        - Key: "Name"
          Value: !Sub ${EnvironmentName} Jumpbox EC2 (AZ1)
  
  JumpboxInstance2:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
      IamInstanceProfile: !Ref ServerInstanceProfile
      ImageId: !Ref AmiIDJumpBox
      InstanceType: t3.micro
      KeyName: !Ref JumpboxKey
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - !Ref JumpboxSecurityGroup
          SubnetId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-PUB2-SN"  # NETWORK EXPORT
      Tags:
        - Key: "Name"
          Value: !Sub ${EnvironmentName} Jumpbox EC2 (AZ2)
...