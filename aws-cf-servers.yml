---
AWSTemplateFormatVersion: 2010-09-09

Description: >
  Servers: EC2 instance on private subnet, with HTTP access via Load Balancer and SSH access via Jump Box

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: "Default Environmnent Name"
  
  PrivateEC2Key: 
    Description: Key for Private EC2 Instance
    Type: String
    Default: udacity-ed25519-key
  
  JumpboxKey: 
    Description: Key for Jumpbox EC2 Instance
    Type: String
    Default: udacity-jumpbox

  #VpcID:
  #  Description: ID of the VPC to associate to [Referenced from Network Script Exports]
  #  Type: String
  #  Default: !Sub "${EnvironmentName}-VPCID"

  #PublicSubnet1ID:
  #  Description: Public Subnet 1 ID [Referenced from Network Script Exports]
  #  Type: String
  #  Default: !Sub "${EnvironmentName}-PublicSubnet1-ID"

  #PrivateSubnet1ID:
  #  Description: Private Subnet 1 ID [Referenced from Network Script Exports]
  #  Type: String
  #  Default: !Sub "${EnvironmentName}-PrivateSubnet1-ID"

  AmiIDPrivateImage:
    Description: AMI ID of EC2 Instances
    Type: String
    Default: ami-013a129d325529d4d

  AmiIDJumpBox:
    Description: AMI ID of Jump Box
    Type: String
    Default: ami-013a129d325529d4d


Resources:
  
  # IAM role to allow EC2 Session Manager to access our server
  #RoleForSSMAccess:
  #  Type: "AWS::IAM::Role"
  #  Properties:
  #    AssumeRolePolicyDocument: TODO
  #    Description: 
  #    # Properties go here
  #    Tags: 
  #      - Key: "Name"
  #        Value: !Sub ${EnvironmentName} IAM Role

  # Intance Profile
  #ServerInstanceProfile:
  #  Type: "AWS::IAM::InstanceProfile"
  #  Properties:
      # Properties go here

  # Webserver Security Group
  WebAccessPrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-MainVPC"  # NETWORK EXPORT
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80 
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  # Server EC2 Instance
  PrivateEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
      ImageId: !Ref AmiIDPrivateImage
      InstanceType: t3.micro
      KeyName: !Ref PrivateEC2Key
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "false"
          DeviceIndex: "0"
          GroupSet: 
            - !Ref WebAccessPrivateSecurityGroup
          SubnetId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-PrivateSubnet1"  # NETWORK EXPORT
      Tags:
        - Key: "Name"
          Value: !Sub ${EnvironmentName} Private EC2 Instance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum update -y
          sudo amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
          sudo yum install -y httpd mariadb-server
          sudo systemctl start httpd
          sudo systemctl enable httpd
          sudo chkconfig httpd on
          # sudo sed -i 's/Listen 80/Listen 8080/' /etc/httpd/conf/httpd.conf
          sudo systemctl restart httpd
          cd /var/www/html
          echo "Demo Web Server Up and Running!" > index.html


  # LB Security Group
  #LBSecGroup:
  #  Type: AWS::EC2::SecurityGroup
  #  Properties:
  #    GroupDescription: Allow http to our load balancer
  #    VpcId:
  #      Fn::ImportValue:
  #        !Sub "${EnvironmentName}-MainVPC"  # NETWORK EXPORT
  #    SecurityGroupIngress:
  #    - IpProtocol: tcp
  #      FromPort: 80
  #      ToPort: 80
  #      CidrIp: 0.0.0.0/0
  #    SecurityGroupEgress:
  #    - IpProtocol: tcp
  #      FromPort: 80
  #      ToPort: 80
  #      CidrIp: 0.0.0.0/0

  # Load Balancer
  #LBWebApp:
  #  Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #  Properties:
  #    Subnets:
  #    - Fn::ImportValue: !Sub "${EnvironmentName}-PublicSubnet1"  # NETWORK EXPORT
  #    SecurityGroups:
  #    - Ref: LBSecGroup

  # LB - Listener
  #LBListener:
  #  Type: AWS::ElasticLoadBalancingV2::Listener
  #  Properties:
  #    DefaultActions:
  #    - Type: forward
  #      TargetGroupArn:
  #        Ref: PrivateEC2Instance
  #    LoadBalancerArn:
  #      Ref: LBWebApp
  #    Port: '80'
  #    Protocol: HTTP

  # LB - Listener Rule

  # LB - Target Group

  # Jumpbox Security Group

  # Jumpbox WebServer Group
  JumpboxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Inbound TCP port 22 (SSH), unrestricted outbound
      GroupName: Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-MainVPC"  # NETWORK EXPORT
      Tags: 
        - Key: "Name"
          Value: !Sub ${EnvironmentName} EC2 Security Group

  # Server EC2 Instance
  JumpboxInstance:
    Type: AWS::EC2::Instance
    Properties:
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
      ImageId: !Ref AmiIDJumpBox
      InstanceType: t3.micro
      KeyName: !Ref JumpboxKey
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - !Ref JumpboxSecurityGroup
          SubnetId:
            Fn::ImportValue:
              !Sub "${EnvironmentName}-PublicSubnet1"  # NETWORK EXPORT
      Tags:
        - Key: "Name"
          Value: !Sub ${EnvironmentName} Jumpbox EC2 Instance
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo echo "${PrivateEC2Instance.PrivateIp}    private-ec2" >> /etc/hosts
#Outputs: 
  # Outputs go here
...